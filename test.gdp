@include "test_include.gdp"

# Alias
using StringDict = Dictionary[String, String]
var another_dict: StringDict = {"1": "22", "3": "2"}

constexpr constexpr_test: float = sqrt(2)
constexpr constexpr_test2: float = constexpr_test + sqrt(2)

@define TEST_MACRO really_long_variable_name_that_is_very_long
var TEST_MACRO: int = 0

@define THING var thing1: int = 0
THING

@undef THING
var THING: int = 0

func constexpr_usage_test_func(x: int) -> int:
	var value: int = constexpr_test2 + x
	return value

consteval consteval_test: float = pow(2, 12)
func consteval_usage_test_func(x: int) -> int:
	var value: int = consteval_test + x
	return value

using Union[String,int,float] = Array
func test_union_alias() -> Union[String,int,float]:
	return Array()

using Optional[String] = Variant
func test_union_alias2() -> Optional[String]:
	if 1:
		return String()
	else:
		return null

# Conditional compilation with constant expressions
@if DEBUG_ENABLED
func super_secret_debug_function() -> void:
	print("I like cats")
@else
func normal_non_debug_function() -> void:
	print("I like dogs")
@endif

constexpr cond_comp_var: int = 0
constexpr cond_comp_var_two: int = cond_comp_var + 4

consteval power_level: int = sqrt(9001 + sqrt(2) * pow(4, 9)) * 5000

@if power_level > 9000
func get_favorite_animal() -> String:
@if DEBUG_ENABLED
	return "Frogs are my favorite"
@else
	return "Rabbits are cool"
@endif
@endif

constexpr x: String = "Hello" + " World " + "!"
constexpr y: Vector3 = Vector3(5, 5, 5)
constexpr z: int = 999
consteval TEST: Vector2 = Vector2(0, 0)

@if TEST == Vector2(1, 0)
func test_test_test():
	print("hello")
@endif
